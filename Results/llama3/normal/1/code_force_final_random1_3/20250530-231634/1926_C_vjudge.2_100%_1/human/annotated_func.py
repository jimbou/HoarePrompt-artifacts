#State of the program right berfore the function call: stdin contains two inputs: first an integer t (1 <= t <= 10^4) and then t lines each containing an integer n (1 <= n <= 2 * 10^5).
    N = int(2 * 100000.0) + 1
    t = int(input())
    pd = [(0) for _ in range(N)]
    for i in range(1, N):
        pd[i] += pd[i - 1]
        
        for j in str(i):
            pd[i] += int(j)
        
    #State: Output State: `t` is an integer between 0 and 10^4 inclusive, `N` is 200001, `pd` is a list of 200001 integers where `pd[1]` is still 0 and `pd[i]` is increased by the integer value of all characters in the string `i` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]` is increased by `pd[i - 1]` and `pd[i]`
    for _ in range(t):
        n = int(input())
        
        print(pd[n])
        
    #State: Output State: `t` is an integer between 0 and 10^4 inclusive, `N` is 200001, `pd` is a list of 200001 integers where `pd[1]` is still 0 and `pd[i]` is increased by the integer value of all characters in the string `i` and `pd[i]` is increased by `pd[i - 1]` and `_` is `t`, `n` is an integer that is equal to the input integer from stdin, stdin is empty, and the value of `pd[n]` is being printed, which is the cumulative sum of the integer values of all characters in the strings from 1 to `n` and the cumulative sum of the previous values in the list `pd`.
    #
    #In natural language, the output state after the loop executes all the iterations is that the loop has finished executing, and the variable `_` has reached the value of `t`, indicating that the loop has iterated `t` times. The list `pd` remains unchanged, with each element `pd[i]` being the cumulative sum of the integer values of all characters in the strings from 1 to `i` and the cumulative sum of the previous values in the list `pd`. The variable `n` is still an integer that is equal to the input integer from stdin, and stdin is empty. The value of `pd[n]` is being printed, which is the cumulative sum of the integer values of all characters in the strings from 1 to `n` and the cumulative sum of the previous values in the list `pd`.

#Overall this is what the function does:This function reads an integer t from standard input, representing the number of test cases. It then reads t integers, each representing a number n. For each n, it calculates the cumulative sum of the integer values of all characters in the strings from 1 to n and the cumulative sum of the previous values in a list pd. The function prints the calculated cumulative sum for each n.

