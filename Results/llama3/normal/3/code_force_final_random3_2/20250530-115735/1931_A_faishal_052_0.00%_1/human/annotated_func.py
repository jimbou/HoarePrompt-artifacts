#State of the program right berfore the function call: stdin contains two inputs: first an integer (1 <= t <= 100) and then t integers (3 <= n <= 78).
    cases = int(input())
    for i in range(cases):
        arr = []
        
        lex = int(input())
        
        for j in range(2):
            if lex <= 26:
                arr.append(1)
                lex = lex - 1
            elif lex < 52:
                arr.append(26)
                lex = lex - 26
            else:
                arr.append(26)
                lex = lex - 26
        
        arr.append(lex)
        
        arr.sort()
        
        for k in range(3):
            print(chr(arr[k] + 96), end='')
        
    #State: cases is 0, i is equal to the original value of cases, j is 2, k is 3, stdin is empty, and arr is a sorted list that includes the original elements of arr and lex. If lex is an integer less than or equal to 26, then lex is an integer with a value equal to its original value minus the number of times the loop executed and arr is either [1, lex], [1, 1, lex], [1, 26, 1, lex], or [26, 1, 1, lex] or [26, 26, 1, lex]. If lex is an integer larger than 26 but less than 52, then lex is an integer equal to its original value minus 26 times the number of times the loop executed and arr is [1, 26, lex] or [26, 1, lex]. If lex is an integer larger than or equal to 52, then lex is an integer equal to its original value minus 26 times the number of times the loop executed and arr is [1, 26, 26, lex] or [26, 1, 26, lex] or [26, 26, 26, lex] or [26, 26, 1, 26, lex] or [26, 1, 26, 26, lex] or [1, 26, 26, 26, lex], and the characters represented by the ASCII values of arr[k] + 96 have been printed for all iterations of the loop.

#Overall this is what the function does:This function reads a series of test cases from standard input, where each case consists of an integer value. For each case, it generates a sequence of characters based on the integer value and prints them. The sequence is generated by subtracting 1 or 26 from the integer value, depending on its magnitude, and appending the corresponding ASCII characters to the sequence. The sequence is then sorted and printed. The function repeats this process for each test case, emptying the standard input in the process.

