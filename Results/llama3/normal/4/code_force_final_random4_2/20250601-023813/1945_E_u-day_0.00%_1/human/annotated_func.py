#State of the program right berfore the function call: stdin contains a space-separated list of integers.
    return map(int, input().split())
    #The program returns a map object that contains a sequence of integers, where each integer is a value from the space-separated list of integers in stdin.

#Overall this is what the function does:The function reads a space-separated list of integers from standard input, converts each integer to an integer type, and returns a map object containing the sequence of integers.

#State of the program right berfore the function call: func_1 is a function that returns an iterator of values
    return list(func_1())
    #The program returns a list of values that are generated by the iterator returned by the function func_1

#Overall this is what the function does:The function accepts no parameters and returns a list of values generated by the iterator returned by the function func_1. Upon conclusion, the function provides a list of values produced by func_1's iterator.

#State of the program right berfore the function call: n is a positive integer, k is a positive integer such that 1 <= k <= n, arr is a list of distinct integers from 1 to n in arbitrary order, and pos is the index of k in arr.
    n, k = func_1()
    arr = func_2()
    pos = -1
    for i in range(n):
        if arr[i] == k:
            pos = i
        
    #State: `n` is a positive integer, `k` is a positive integer such that 1 <= k <= n, `arr` is a list of distinct integers from 1 to n in arbitrary order, `i` is `n-1`. If `arr[i]` is equal to `k`, then `pos` is `n-1`. Otherwise, `pos` remains -1.
    low, high = 0, n - 1
    st = set()
    while low + 1 < high:
        mid = (low + high) // 2
        
        st.add(mid)
        
        if arr[mid] > k:
            high = mid
        else:
            low = mid
        
    #State: low is equal to high, st is a set containing all the values of mid from the previous iterations.
    if (arr[low] == k) :
        print(0)
        #This is printed: 0
    else :
        print(1)
        #This is printed: 1
        print(low + 1, pos + 1)
        #This is printed: high + 1, pos + 1 (where pos is the value of pos)
    #State: *low is equal to high, st is a set containing all the values of mid from the previous iterations. If the current value of arr[low] is equal to k, then 0 is printed. Otherwise, 1 is printed, and low + 1 and pos + 1 are printed.

#Overall this is what the function does:This function searches for a target value `k` in a list of distinct integers `arr` and prints the result. If `k` is found at the index `low`, it prints 0. If `k` is not found at `low`, it prints 1, followed by the index `low + 1` and the actual position of `k` in the list (`pos + 1`). The function modifies the state of the program by printing the search result and the indices, but does not modify the input list `arr` or the values of `n`, `k`, or `pos`.

