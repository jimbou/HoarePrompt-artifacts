#State of the program right berfore the function call: cast is a function that takes a string and returns a value of a specific type, and input() is a function that returns a string of space-separated values.
    return map(cast, input().split())
    #The program returns a map object that applies the cast function to each string in the list of space-separated values returned by the input() function.

#Overall this is what the function does:The function takes a string of space-separated values as input, applies a specified cast function to each value, and returns a map object containing the converted values.

#State of the program right berfore the function call: arr is a list of values of any type and predicate is a function that takes one argument and returns a boolean value.
    l, r = 0, len(arr)
    while l + 1 < r:
        mid = (l + r) // 2
        
        if predicate(arr[mid]):
            l = mid
        else:
            r = mid
        
    #State: `l` and `r` are equal, `l` and `r` are the index of the first element in `arr` for which the `predicate` function returns true, or the length of `arr` if no such element exists.
    if predicate(arr[l]) :
        return l
        #The program returns the index of the first element in `arr` for which the `predicate` function returns true, or the length of `arr` if no such element exists. This index is equal to `r` and the value of `predicate(arr[l])` is true.
    #State: *`l` and `r` are equal, `l` and `r` are the index of the first element in `arr` for which the `predicate` function returns true, or the length of `arr` if no such element exists. The `predicate` function returns false for the element at index `l` in `arr`
    return None
    #The program returns None

#Overall this is what the function does:This function performs a binary search on a list `arr` using a given predicate function. It returns the index of the first element in `arr` for which the predicate function returns true, or the length of `arr` if no such element exists. If the predicate function returns false for the element at the found index, the function returns None.

#State of the program right berfore the function call: n and q are positive integers, a is a list of non-negative integers less than 2^30, and func_1 and func_2 are functions that return values of type int and list respectively.
    n, q = func_1(int)
    a = list(func_1(int))
    x = [0]
    inds = defaultdict(list)
    inds[0].append(0)
    for i in a:
        x.append(x[-1] ^ i)
        
        inds[x[-1]].append(len(x) - 1)
        
    #State: n is an integer, q is an integer, a is a list of integers, x is a list containing the cumulative XOR of all elements in a, inds is a dictionary with keys being the cumulative XOR values and their corresponding indices in x.
    for i in range(q):
        l, r = func_1(int)
        
        if x[l - 1] == x[r]:
            print('Yes')
            continue
        
        lower = func_2(inds[x[r]], lambda arg: arg < l) or -1
        
        upper = func_2(inds[x[l - 1]], lambda arg: arg <= r)
        
        lower = inds[x[r]][lower + 1]
        
        upper = inds[x[l - 1]][upper]
        
        if upper > lower and l <= upper <= r and l <= lower <= r:
            print('Yes')
        else:
            print('No')
        
    #State: n is an integer, q is a non-negative integer, a is a list of integers, x is a list containing the cumulative XOR of all elements in a, inds is a dictionary with keys being the cumulative XOR values and their corresponding indices in x, i is q.

#Overall this is what the function does:This function determines whether there exists a subarray within a given list of integers that has a cumulative XOR value equal to a target value, for a specified range of indices. It iterates over a series of queries, each specifying a range of indices, and prints 'Yes' if such a subarray exists and 'No' otherwise. The function takes no explicit parameters but uses values generated by external functions func_1 and func_2, and modifies no external state.

