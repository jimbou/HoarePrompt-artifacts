#State of the program right berfore the function call: stdin contains a space-separated list of integers.
    return map(int, input().split())
    #The program returns a map object that contains a list of integers that were provided as input through stdin, where each integer is separated by a space.

#Overall this is what the function does:The function reads a space-separated list of integers from standard input and returns a map object containing these integers.

#State of the program right berfore the function call: func_1 is a function that returns an iterator of values
    return list(func_1())
    #The program returns a list of values that are generated by the iterator returned by the function func_1.

#Overall this is what the function does:The function accepts no parameters and returns a list of values generated by an iterator returned by another function, func_1. The function's purpose is to convert the iterator into a list, which is then returned as the result.

#State of the program right berfore the function call: n is a positive integer, k is a positive integer such that 1 <= k <= n, and arr is a list of distinct integers from 1 to n in arbitrary order.
    n, k = func_1()
    arr = func_2()
    pos = -1
    for i in range(n):
        if arr[i] == k:
            pos = i
        
    #State: Output State: The value of pos is the index of the first occurrence of k in arr, or -1 if k is not found in arr.
    low, high = 0, n - 1
    st = set()
    while low + 1 < high:
        mid = (low + high) // 2
        
        st.add(mid)
        
        if arr[mid] > k:
            high = mid
        else:
            low = mid
        
    #State: low = pos, high = pos, st = {mid1, mid2, ..., midn}, where mid1, mid2, ..., midn are the indices of the elements in arr that were compared to k during the loop executions.
    if (arr[low] == k) :
        print(0)
        #This is printed: 0
    else :
        print(1)
        #This is printed: 1
        print(low + 1, pos + 1)
        #This is printed: pos + 1, pos + 1 (where pos is the value of pos)
    #State: low equals pos, high equals pos, st is a set of indices mid1, mid2, ..., midn, where mid1, mid2, ..., midn are the indices of the elements in arr that were compared to k during the loop executions. If the current value of arr[low] is equal to k, then 0 is printed. Otherwise, arr[low] is not equal to k, 1 is printed, and the value of low + 1 which is pos + 1 and the value of pos + 1 which is pos + 1 are printed.

#Overall this is what the function does:This function searches for a target value k in a list of distinct integers arr. It first finds the index of the first occurrence of k in arr, then performs a binary search to locate the same index. If the target value is found at the located index, it prints 0. Otherwise, it prints 1 along with the located index plus one and the actual index of the target value plus one. The function modifies the state of the program by printing the results and creating a set of indices of elements compared to the target value during the binary search.

