#State of the program right berfore the function call: stdin contains a space-separated list of integers.
    return map(int, input().split())
    #The program returns a map object that contains a list of integers, where each integer is a value from the space-separated list of integers in stdin.

#Overall this is what the function does:Reads a space-separated list of integers from standard input and returns a map object containing the list of integers.

#State of the program right berfore the function call: func_1 is a function that returns an iterator of values
    return list(func_1())
    #The program returns a list of values that are returned by the iterator of the function func_1

#Overall this is what the function does:The function takes no parameters and returns a list of values generated by the iterator returned by the function func_1.

#State of the program right berfore the function call: n is a positive integer, k is a positive integer such that 1 <= k <= n, arr is a list of distinct integers from 1 to n in arbitrary order, and the function func_1() returns a tuple of two integers (n, k), and the function func_2() returns a list of integers arr.
    n, k = func_1()
    arr = func_2()
    pos = -1
    for i in range(n):
        if arr[i] == k:
            pos = i
        
    #State: Output State: The value of pos is the index of k in arr, and the values of n, k, and arr remain unchanged.
    low, high = 0, n
    st = set()
    while low + 1 < high:
        mid = (low + high) // 2
        
        st.add(mid)
        
        if arr[mid] > k:
            high = mid
        else:
            low = mid
        
    #State: low is the largest index i such that arr[i] <= k, high is low + 1, st is a set of indices i such that low <= i <= high and arr[i] > k.
    if (arr[low] == k) :
        print(0)
        #This is printed: 0
    else :
        print(1)
        #This is printed: 1
        print(low + 1, pos + 1)
        #This is printed: low + 1 (which is the index of the first element in the array that is greater than k), high + 1 (which is the index of the second element in the array that is greater than k)
    #State: low is the largest index i such that arr[i] <= k, high is low + 1, st is a set of indices i such that low <= i <= high and arr[i] > k. If the current value of arr[low] is equal to k, then 0 is printed. Otherwise, 1 is printed, and the value of low + 1 and pos + 1 is printed.

#Overall this is what the function does:This function determines the position of a target value k in a sorted list of distinct integers from 1 to n. It first finds the index of k in the list, then performs a binary search to find the largest index i such that the value at index i is less than or equal to k. If the value at this index is equal to k, it prints 0. Otherwise, it prints 1 and the indices of the first and second elements in the list that are greater than k. The function does not modify the input list or the values of n and k.

